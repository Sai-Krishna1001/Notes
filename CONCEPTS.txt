SQL CONCEPTS
=====================
Basic SQL - SELECT, INSERT, UPDATE, DELETE, JOIN, aggregate functions, etc.

Advanced SQL - Window functions, CTEs, dynamic SQL, recursive queries, pivoting, etc.

Database Design - Normalization, indexing, keys, schema optimization, etc.

Transactions - Committing or rolling back units of work, isolation levels, concurrency.

Stored Procedures - Modular routines for reusable logic stored in the database.

Triggers - Code automatically executed in response to database events.

Views - Saved queries that act as virtual tables.

User-Defined Functions - Custom reusable functions in the database.

Cursors - Temporarily hold result sets that can be processed row by row.

Security - User permissions, roles, access control, encryption, auditing.

Performance Tuning - Query optimization, execution plans, profiling, caching.

High Availability - Replication, clustering, failover, disaster recovery.

Administrative - Backup, restore, upgrade, migration, monitoring.

Connectivity - APIs, connection pooling, transactions, network configuration.

Cloud Databases - AWS RDS, Azure SQL, Google Cloud SQL, utilization, scalability.

============================================================================================
MONGODB CONCEPTS
=====================
Documents - The basic data unit in MongoDB. Similar to JSON objects.

Collections - Grouping of documents. Analogous to tables in relational databases.

Databases - Contain collections. A single server can have multiple independent databases.

CRUD Operations - Create, read, update, and delete documents.

Query Language - Find, filter, sort, etc documents. Based on JSON queries and operators.

Indexes - Improve query performance by indexing document fields.

Aggregation - Analytical queries to process data and return aggregated results.

Replication -copies data to multiple servers for redundancy and high availability.

Sharding - Scales horizontally by partitioning data across clusters.

Transactions - Ability to execute operations in isolation and atomicity.

Schema Design - Structure documents for optimal queries and performance. Avoid over-nesting.

Data Modeling - Design database in a MongoDB idiomatic way, denormalized.

MongoDB Shell - Interactive JS interface to connect and work with MongoDB.

Drivers - Client libraries for different languages to connect from applications.

Security - Authentication, authorization, encryption to secure MongoDB.

Administration - Installation, configuration, performance tuning, backup, etc.

Cloud Deployments - MongoDB Atlas, AWS, Azure, etc.

Migration from SQL - Strategies to migrate from relational databases.


================================================================================================
JAVA CORE CONCEPTS
===================
JAVA 8 FEATURES
================
Lambda expressions - Added support for writing functional style code blocks using lambda syntax. Allows passing functions as method arguments.
Method references - Referencing existing methods directly instead of defining lambda expressions. Useful for passing existing methods to lambda accepting methods.
Functional interfaces - Introduced new functional interfaces like Function, Consumer, Predicate etc to support lambda expressions.
Stream API - New stream API to facilitate pipeline processing of data in a declarative manner. Supports aggregate operations on stream elements.
Default methods - Interface can now contain default method implementations. Allows adding new methods without breaking existing implementations.
Optional - New optional class to represent optional values instead of null. Helps avoid NullPointerException.
Nashorn JavaScript Engine - New JavaScript engine to allow embedding and executing JavaScript code within Java.
Date and Time API - New Date Time API inspired by Joda-Time. Immutable and thread-safe.
Base64 - New java.util.Base64 class for Base64 encoding and decoding.
Parallel arrays - Parallel sorting, searching and streaming of arrays now supported.
Type annotations - Support for annotations on generics, lambda parameters, casts. Improved analysis by static analysis tools.
Concurrency updates - Classes in java.util.concurrent updated with new methods. Improved performance of ConcurrentHashMap.

So in summary, the focus should be on lambdas, streams, functional interfaces, date time API, optional, Nashorn engine and concurrency utilities.

JAVA 9 FEATURES (2017)
================
Jigsaw Project - Modularization of the JDK into logical modules
Factory methods for immutable List, Set, Map
Private interface methods
Process API improvements
Try-with-resources enhancement
@Deprecated annotation enhancement

JAVA 10 FEATURES (2018)
================
Local-variable type inference (var keyword)
Garbage Collector interface
Parallel full GC for G1
Heap allocation on alternative memory devices
Experimental AOT compiler

JAVA 11 FEATURES (2018)
===============
Local-variable syntax for lambda parameters
HTTP Client API (standard HTTP client)
String methods (lines, strip, stripLeading, stripTrailing, isBlank)
Nested based access control
Flight recorder
Epsilon GC (no-op garbage collector)

JAVA 12 FEATURES (2019)
===============
Shenandoah GC
Microbenchmark Suite
Switch Expressions
Compact Number Formatting
Abortable Mixed Collections for G1
JVM Constants API


JAVA 13 FEATURES (2019)
================
Switch Expressions
Text Blocks
Reimplement the Legacy Socket API
Dynamic CDS Archives

JAVA 14 FEATURES (2020)
================
Records
Pattern Matching for instanceof
Helpful NullPointerExceptions
Switch Expressions
Packaging Tool (jpackage)

JAVA 15 FEATURES (2020)
================
Sealed Classes
Hidden Classes
Text Blocks
Removal of Nashorn JavaScript Engine

JAVA 16 FEATURES (2021)
================
Records
Sealed Classes
Pattern Matching for instanceof
Packaging Tool Improvements
Warnings for Value-Based Classes

JAVA 17 FEATURES (2021)
================
Sealed Classes
Pattern Matching for switch
Remove the Nashorn JavaScript Engine
Deprecate the Applet API for Removal
Unicode Language-Tag Extensions

JAVA 18 FEATURES (2022)
================
Simple Web Server
Vector API (Incubator)
Simple Web Server
Disable and Deprecate Biased Locking

============================================================================================
DESIGN PATTERNS CONCEPTS
===============================
Abstraction - Abstracting complex systems to simplify design. Using interfaces and abstract classes to define abstraction.

Encapsulation - Hiding internal implementation details from other objects. Using access modifiers like private and protected to control visibility.

Inheritance - Creating new classes from existing classes. Subclass inherits attributes and behaviors from parent class.

Polymorphism - Ability of objects to take on multiple forms. Using virtual methods that can be overridden by subclasses.

Coupling - Level of interdependence between classes and objects. Goal is to reduce coupling as much as possible.

Cohesion - Degree to which class elements belong together. High cohesion indicates good class subdivision.

Single Responsibility Principle - Class should only have one reason to change. Separate responsibilities into different classes.

Open/Closed Principle - Classes should be open for extension but closed for modification. Use inheritance and abstraction.

Liskov Substitution Principle - Derived classes should be substitutable for their base classes. Follow inheritance rules.

Interface Segregation Principle - Many client-specific interfaces better than one general interface. Split into smaller interfaces.

Dependency Inversion - Depend on abstractions rather than concretions. Introduce abstractions that can be mocked/stubbed.

Patterns like Factory, Singleton, Facade, Observer, Decorator, Proxy, Composite etc.

=============================================================================================
HIBERNATE CONCEPTS
======================
Entity - This represents a table in the database. An entity class is mapped to a database table.

Mapping file - This XML file contains the mapping between the entity class and the database table. It defines which class fields map to which table columns.

SessionFactory - This is the factory class through which hibernate sessions can be obtained. It reads the mapping files and builds the mapping metadata.

Session - This interface represents a conversation between the application and the database. It is a short-lived object used to get a physical connection with a database.

Transaction - This represents a unit of work with the database. Transactions in hibernate encapsulate the save, update and delete operations.

Persistent and Transient states - Persistent represents an object that is associated with a session and has an identifier. Transient means it has no persistent representation in the database.

Lazy loading - Objects are loaded on demand, only when they are accessed. This improves performance by avoiding unnecessary queries.

Eager loading - Objects are loaded along with parent objects, using joins when getting the parent. This avoids n+1 queries problem.

Caching - Caching frequently accessed data to improve performance. First and second level caches are used.

Inheritance mapping - Mapping subclasses to tables using strategies like joined subclass, table per class etc.

Association mapping - Mapping one-to-one, one-to-many and many-to-many relationships between entities.

HQL - Hibernate Query Language, similar to SQL, to perform queries on objects.

Criteria API - Programmatic query building API alternative to HQL.

==================================================================================================
====================================================================================================
